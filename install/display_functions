#!/bin/bash 

# This file is part of Centreon-Discovery module.
#
# Centreon-Discovery is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses>.
#
# Module name: Centreon-Discovery
#
# First developpement by: Jean Marc Grisard - Christophe Coraboeuf
# Adaptation for Centreon 2.0 by: Merethis team
# Inspired from Watt's script.
#
# Modified by: Sub2.13
#
# WEBSITE: http://community.centreon.com/projects/centreon-discovery
# SVN: http://svn.modules.centreon.com/centreon-discovery

#---------------------#
# Used by install.sh  #
#---------------------#

## load all functions used in this script
. $INSTALL_DIR/variables

#----
## print info message
## add info message to log file
## @param	message info
## @param	type info (ex: INFO, username...)
## @Stdout	info message
## @Globals	LOG_FILE
#----
function echo_info() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_INFO}${2}${SETCOLOR_NORMAL}" 
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print success message
## add success message to log file
## @param	message
## @param	word to specify success (ex: OK)
## @Stdout	success message
## @Globals	LOG_FILE
#----
function echo_success() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_SUCCESS}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print failure message
## add failure message to log file
## @param	message
## @param	word to specify failure (ex: fail)
## @Stdout	failure message
## @Globals	LOG_FILE
#----
function echo_failure() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_FAILURE}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print passed message
## add passed message to log file
## @param	message
## @param	word to specify pass (ex: passed)
## @Stdout	passed message
## @Globals	LOG_FILE
#----
function echo_passed() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_WARNING}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print warning message
## add warning message to log file
## @param	message
## @param	word to specify warning (ex: warn)
## @Stdout	warning message
## @Globals	LOG_FILE
#----
function echo_warning() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_WARNING}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## add message on log file
## @param	type of message level (debug, info, ...)
## @param	message
## @Globals	LOG_FILE
#----
function log() {
	local program="$0"
	local type="$1"
	shift
	local message="$@"
	echo -e "[$program]:$type: $message" >> $LOG_FILE
}

#----
## make a question with yes/no possiblity
## use "no" response by default
## @parammessage to print
## @param default response (default to no)
## @return 0 yes
## @return 1 no
#----
function yes_no_default() {
	local message=$1
	local default=${2:-$no}
	local res="not_define"
	while [ "$res" != "$yes" ] && [ "$res" != "$no" ] && [ ! -z "$res" ] ; do
		echo -e "$message\n[y/n], default to [$default]:"
		echo -en "> "
		read res
		[ -z "$res" ] && res="$default"
	done
	echo ""
	if [ "$res" = "$yes" ] ; then 
		return 0
	else 
		return 1
	fi
}

#----
## print ok for $1=0 or fail for $1=1
## add failure message to log file
## @param1integer : 0 OK // .. KO
## @param2message
## @return      @param1
## @Stdoutmessage + OK/FAIL
## @Globals     LOG_FILE
#----
function display_return(){
    if [ "$1" -eq 0 ] ; then
	echo -e "${MOVE_TO_COL}${SETCOLOR_SUCCESS}${ok}${SETCOLOR_NORMAL}"
	echo -e "$2 : $ok" >> $LOG_FILE
	return $1
    else
	echo -e "${MOVE_TO_COL}${SETCOLOR_FAILURE}${fail}${SETCOLOR_NORMAL}"
	echo -e "$2 : $fail" >> $LOG_FILE
	return $1
    fi
}

#---
## (Write header)
##
## @param1        text
## @param2        if it exists, then insert a line at begin
## @return 0      always
#---
function write_header(){
    if [ $# -eq 2 ] ; then
	echo ""
    fi
    echo -e "$line"
    echo "$line" >> $LOG_FILE
    echo -e "\t$1"
    echo "$1" >> $LOG_FILE
    echo -e "$line\n"
    echo "$line" >> $LOG_FILE
    return 0
}